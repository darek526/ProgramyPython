"""
Odwracanie elementu a będącego elelmentem zbioru Zn  n>=2 ; n jest elementem  zbioru N
a

"""
"""
# nie używamy break przegladamy wszystkie lelmenty zbioru
n=int(input("Wprowadż liczbę elementów pierścienia n= "))
a=int(input("Wprowadż element odracany a="))
c=0
for i in range(1,n):
    if (((i*a)%n)==1):
        print("Elementem odwrotnym do a jest b = ",i)
        c=1
    if c==0:
        print("Nie istnieje element odrotny do a")
        print("NWD (a,b) nie jest równy 1 \n")
"""
"""
# z uzyciem break
n=int(input("Wprowadż liczbę elementów pierścienia n= "))
a=int(input("Wprowadż element odracany a="))
c=0
for i in range(1,n):
    if (((i*a)%n)==1):
        print("Elementem odwrotnym do a jest b = ",i)
        c=1
        break
    if c==0:
        print("Nie istnieje element odrotny do a")
        print("NWD (a,b) nie jest równy 1 \n")
"""
"""
Rozszerzony algorytm Euklidesa dla pierścienia liczb całkowitych
"""
"""
def roz_alg_eukl(a,b):
    xs=[1,0]#wstępne podstawienie
    ys=[0,1]
    sign=1
    while b!=0:
        r=a%b #dzielenie z reszta a przez b
        q=a/b #dzielenie z reszta a przez b

        a=b
        b=r

        xx=xs[1]
        yy=ys[1]
        xs[1]=q*xs[1]+xs[0] # tworzymy cia  x-sów
        ys[1]=q*ys[1] +ys[0] # tworzymy cia  y-sów
        xs[0]=xx
        ys[0]=yy
        sign=sign
"""
"""
#funkcja oblicz element odwrotny w pierścieniu reszt nodulo n

def element_odwrotny(a,n):
    import nwd
    l=nwd,roz_alg_eukl(a,n)
    if l[0]==1:
        return l[1]%n
    else:
        print("element nie ma elementu odwrotnego")
# koniec funkcji elementu odwrotnego
n=int(input("Wprowadz n, n="))
a=int(input("Wprowadz a, a="))
print("element odwrotny do a=", a)
print("jest rowny =", element_odwrotny(a,n))
"""
